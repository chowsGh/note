1. 原svn开发方式，不提交到本地，要提交前先git stash -u ，git pull, 然后git stash apply, 手动更改冲突，git push
2. 本地使用develp分支，提交master先pull，是版本是最新的，然后merge develop 然后在push

合并主干commit
$ git fetch origin
$ git rebase origin/master

不要使用 push --force

git 不是增量记录文件，是快照形式的，每当文件更新，git会对这个文件进行快照，每个commit 就是快照的集合。当与远程库有冲突，在进行一次merge然后
生成一个commit, 这个mergeCommit 会直接push 到远程库
安装/运行/配置
email 


查看帮助

git {command} --help





添加远程仓库方式
ssh协议 
需要在远程仓库配置本地公钥

https协议
提交需要账号密码



TotoriseGit 使用简介
使用ssh 远程协作，配置私钥，或者选择 git ssh作为ssh客户端
git clone 
git add file
git commit 
git commit -amend
git fetch
git pull --no-commit
git fetch followed by git merge FETCH_HEAD

git push
储藏 stash
将跟踪（tracked）的文件内容保存，恢复工作区，暂存区未HEAD的内容，然后可以通过pop 或者apply恢复

使用方法：

保存内容到储藏区 git stash (save) -u(未跟踪的文件即新增或者删除没有git add的文件) | --all(忽略文件页添加)
查看储藏区内容 git stash list 
恢复储藏内容
git stash pop {stash@{2}}  弹出并删除储藏区内容
git stash apply {stash@{2}} 恢复但是不删除储藏区内容
删除储藏内容


清理

clean -n

clean -f 



清理恢复

git reset 

git revert 

git checkout 

TortoiseGit 远程本地比对  fetch 后 git log 比对
